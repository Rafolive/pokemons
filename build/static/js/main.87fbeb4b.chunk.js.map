{"version":3,"sources":["utils/constants.ts","components/ui/Button/index.tsx","components/ui/Loader/index.tsx","components/PokemonsList.tsx","components/PokemonDetails.tsx","App.tsx","index.tsx"],"names":["BASE","Button","children","variant","size","rest","className","type","trim","Loader","PokemonsList","useState","pokemonList","setPokemonList","loading","setLoading","history","useHistory","useEffect","a","listUrl","fetch","response","json","data","results","console","log","getPokemonsList","onClick","rURL","Math","floor","random","length","push","name","map","item","index","src","alt","to","PokemonDetails","useParams","pokemon","setPokemon","getPokemonDetails","species","sprites","other","dream_world","front_default","id","height","weight","is_default","App","exact","path","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.87fbeb4b.chunk.js","sourcesContent":["export const BASE: string = \"https://pokeapi.co/api/v2\";\nexport const SPRITE: string = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon\";\n","import React from \"react\"\r\nimport { ButtonProps } from \"./interface\"\r\nimport \"./button.scss\"\r\n\r\nexport const Button: React.FC<ButtonProps> = ({\r\n  children,\r\n  variant = \"default\",\r\n  size = \"\",\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <button\r\n      {...rest}\r\n      type=\"button\"\r\n      className={`btn ${variant} ${size && `size-${size}`}`.trim()}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./loader.scss\"\r\nexport const Loader = () => {\r\n  return <div className=\"card loader\">Loading</div>\r\n}\r\n","import React, { useEffect, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { BASE, SPRITE } from \"../utils/constants\"\nimport { IPokemonsList } from \"../interface\"\nimport { Link } from \"react-router-dom\"\nimport { Loader, Button } from \"./ui\"\n\nconst PokemonsList = () => {\n  const [pokemonList, setPokemonList] = useState<IPokemonsList[]>([])\n  const [loading, setLoading] = useState<boolean>(false)\n\n  let history = useHistory()\n  const handleRandom = () => {\n    const rURL = pokemonList[Math.floor(Math.random() * pokemonList.length)]\n    history.push(`/pokemon/${rURL.name}`)\n  }\n\n  useEffect(() => {\n    const getPokemonsList = async () => {\n      try {\n        const listUrl: string = `${BASE}/pokemon?limit=20}`\n        setLoading(true)\n        const response: any = await fetch(listUrl)\n        const data: any = await response.json()\n        setLoading(false)\n        const results: IPokemonsList[] = data.results\n        setPokemonList(results)\n      } catch (err) {\n        console.log(err)\n      }\n    }\n    getPokemonsList()\n  }, [])\n\n  // if (loading) {\n  //   return <Loader />\n  // }\n\n  return (\n    <>\n      <h3>Pokemons Application</h3>\n      <div className=\"button-group\">\n        <Button variant=\"warning\" onClick={handleRandom}>\n          Random Pokemon\n        </Button>\n      </div>\n      {loading ? (\n        <Loader />\n      ) : (\n        pokemonList && (\n          <div className=\"row\">\n            {pokemonList.map((item: IPokemonsList, index: number) => {\n              return (\n                <div className=\"col col-3\" key={index + 1}>\n                  <div className=\"card\">\n                    <div className=\"image\">\n                      <img\n                        src={`${SPRITE}/${index + 1}.png`}\n                        alt={`${item.name}`}\n                      />\n                    </div>\n                    <div className=\"pokemon-name\">{item.name}</div>\n                    <div className=\"details\">\n                      <Link key={`${index}`} to={`/pokemon/${item.name}`}>\n                        <Button size=\"sm\" variant=\"success\">\n                          More details\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )\n      )}\n    </>\n  )\n}\n\nexport default PokemonsList\n","import React, { useEffect, useState } from \"react\"\nimport { IPokemon } from \"../interface\"\nimport { BASE } from \"../utils/constants\"\nimport { Link } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\"\nimport { Loader } from \"./ui\"\n\nconst PokemonDetails = () => {\n  const { name }: { name: string } = useParams<any>()\n  const [pokemon, setPokemon] = useState<IPokemon>()\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const getPokemonDetails = async () => {\n    try {\n      const listUrl: string = `${BASE}/pokemon/${name}`\n      setLoading(true)\n      const response: any = await fetch(listUrl)\n      const pokemon: IPokemon = await response.json()\n      setLoading(false)\n      console.log(pokemon)\n      setPokemon(pokemon)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    getPokemonDetails()\n  }, [])\n\n  return (\n    <>\n      {pokemon && (\n        <>\n          <h3>{pokemon.species.name}</h3>\n          {loading ? (\n            <Loader />\n          ) : (\n            <div className=\"card\">\n              <div className=\"card-header\">\n                <div className=\"card-title\">\n                  <Link to=\"/\">&#x21b5; Back</Link>{\" \"}\n                </div>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"row pokemon-card\">\n                  <div className=\"col col-2\">\n                    <div className=\"card-image\">\n                      <img\n                        alt={`image_${pokemon.species.name}`}\n                        src={pokemon.sprites.other.dream_world.front_default}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col col-10\">\n                    <div className=\"pokemon-info\">\n                      <ul>\n                        <li>\n                          Name: <span>{pokemon.species.name}</span>\n                        </li>\n                        <li>\n                          Id: <span>{pokemon.id}</span>\n                        </li>\n                        <li>\n                          Height: <span>{pokemon.height}</span>\n                        </li>\n                        <li>\n                          Weight: <span>{pokemon.weight}</span>\n                        </li>\n                        <li>\n                          Default:{\" \"}\n                          <span>{pokemon.is_default ? \"Yes\" : \"no\"}</span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nexport default PokemonDetails\n","import React, { useState } from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport PokemonsList from \"./components/PokemonsList\"\nimport PokemonDetails from \"./components/PokemonDetails\"\nimport { Button } from \"./components/ui\"\n\nimport \"./styles.scss\"\n\nexport const App = () => {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <PokemonsList />\n          </Route>\n          <Route path=\"/pokemon/:name\">\n            <PokemonDetails />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport {App} from \"./App\";\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}